//===- LerosSubtarget.h - Define Subtarget for the Leros ---*- C++ -*-====//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Leros specific subclass of TargetSubtarget.
//
//===----------------------------------------------------------------------===//

#ifndef Leros_SUBTARGET_H
#define Leros_SUBTARGET_H

#include "LerosFrameLowering.h"
#include "LerosISelLowering.h"
#include "LerosInstrInfo.h"
#include "LerosRegisterInfo.h"
#include "MCTargetDesc/LerosMCTargetDesc.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>
#include "llvm/CodeGen/TargetFrameLowering.h"


#define GET_SUBTARGETINFO_HEADER
#include "LerosGenSubtargetInfo.inc"

namespace llvm {
class LerosSubtarget : public LerosGenSubtargetInfo {
  unsigned XLen = 32;
  MVT XLenVT = MVT::i32;
  bool HasLeros64 = false;

  LerosFrameLowering FrameLowering;
  LerosInstrInfo InstrInfo;
  LerosRegisterInfo RegInfo;
  SelectionDAGTargetInfo TSInfo;
  LerosTargetLowering TLInfo;

public:
  LerosSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                 const TargetMachine &TM);

  void initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                       const Triple &TT);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const LerosFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const LerosInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const LerosRegisterInfo *getRegisterInfo() const override { return &RegInfo; }
  const LerosTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  MVT getXLenVT() const { return XLenVT; }
  unsigned getXLen() const { return XLen; }

  // TODO: Implement the following methods PROPERLY
  bool is64Bit() const {
    // Check if the target is 64-bit
    bool HasLeros64 = true;
    return HasLeros64;
  }

  bool is32Bit() const {

    bool HasLeros32 = true;
    return HasLeros32;
  }


protected:
  bool hasFPImpl(const MachineFunction &MF) const;
};

} // end namespace llvm

#endif
